@model TheGridDesignerViewModel

@{
    ViewData["Title"] = "GRID: Návrhář sloupců";
    Layout = "~/Views/Shared/_LayoutModal.cshtml";

    if (Model.Rec == null || Model.Relations==null)
    {
        return;
    }
    

}


<style type="text/css">
    ul, #tree1 {
        list-style-type: none;
        padding-left: 25px;
    }

    #tree1 {
        margin: 0;
        padding: 0;
    }

    .caret {
        cursor: pointer;
        -webkit-user-select: none; /* Safari 3.1+ */
        -moz-user-select: none; /* Firefox 2+ */
        -ms-user-select: none; /* IE 10+ */
        user-select: none;
        color: navy;
        font-size:130%;
        font-weight: bold;
    }

        .caret::before {
            content: "\25B6";
            color: black;
            display: inline-block;
            margin-right: 6px;
        }

    .caret-down::before {
        -ms-transform: rotate(90deg); /* IE 9 */
        -webkit-transform: rotate(90deg); /* Safari */
        transform: rotate(90deg);
    }

    .collapsed {
        display: none;
    }

    .expanded {
        display: block;
    }

    .field {
        margin-right: 20px;
        padding: 2px;
        cursor:default;
    }
    .timestamp{
        color:palevioletred;
    }

    .field_selected {
        border: solid 1px red;
        background-color:khaki;
        border-radius: 3px;
    }

    li.tree_item:hover .button_field_append {
        visibility: visible;        
    }

    .button_field_append {
        visibility: hidden;
    }
    span.symbol{
        display:inline-block;
        font-size:80%;
        background-color:#F5F5F5;
        border-right:solid 1px silver;
        border-bottom:solid 1px silver;
        text-align:center;
        width:20px;
    }
</style>

<h4>
    GRID [
    @(BL.TheEntities.ByTable(Model.Rec.j72Entity).AliasPlural)
    ]
    Návrhář sloupců
</h4>

<div class="bg-light" style="padding:10px;">
    <button id="cmdSave" onclick="savechanges()" class="btn btn-success">Uložit změny</button>
    <button id="cmdClose" onclick="_window_close()" class="btn btn-light">Zavřít</button>

    <button id="cmdRestore2Factory" onclick="restore2factory()" class="btn btn-light" style="float:right;">Nahodit Grid do továrního stavu</button>

</div>
<div class="modal_record_container">
    <form id="form1" asp-controller="TheGrid" asp-action="Designer" method="POST">
        
        

        <input type="hidden" asp-for="Rec.j72Columns" class="form-control" />
        <input type="hidden" asp-for="Rec.pid" />
    </form>
    <div class="row">

        <div class="col-6">
            <h5>Katalog sloupců</h5>
            <ul id="tree1">
                @{ 
                    string strClass = "";
                    string strUniqueName = "";

                }
                @foreach (var rel in Model.Relations)
                {
                    <li>
                        <span id="@("group__"+rel.RelName+"__"+rel.TableName)" class="caret">@rel.AliasSingular</span>
                        <ul class="collapsed">
                            @foreach (var col in Model.AllColumns.Where(p => p.Entity == rel.TableName))
                            {
                                strUniqueName = rel.RelName + "__" + col.Entity + "__" + col.Field;
                                strClass = "field";
                                if (col.IsTimestamp) strClass += " timestamp";

                            <li class="tree_item">
                                <span class="symbol">@Html.Raw(col.getSymbol())</span>
                                <span data-field="@(strUniqueName)" class="@strClass">@col.Header</span>

                                
                                <button data-entity="@(rel.RelName+"__"+col.Entity)" data-field="@(strUniqueName)" title="Přidat" style="font-size:150%;" class="btn btn-primary py-0 button_field_append">
                                    →
                                </button>


                            </li>
                            }
                        </ul>
                    </li>
                }
            </ul>
        </div>
        <div class="col-1">
            <button type="button" id="cmdRemove" class="btn btn-primary py-0" style="margin-top:100px;float:right;font-size:150%;">
                ←
            </button>
        </div>
        <div class="col-5">
            <h5>Vybrané sloupce</h5>
                

                <select id="list1" multiple="multiple" style="height:200px;width:100%;">
                </select>




                <button type="button" id="cmdUp" class="btn btn-primary py-0" style="font-size:150%;">
                    ↑
                </button>
                <button type="button" id="cmdDown" class="btn btn-primary py-0" style="font-size:150%;">
                    ↓
                </button>
</div>
    </div>
</div>







<script type="text/javascript">
    var _sels = [];

    $(document).ready(function () {

        tree_init();

        recovery_state();
        refresh_state();

        //expand all
        //$(".caret").click();



        $(".button_field_append").click(function (e) {
            handle_append_field(this,true);
        });
    });

    function handle_append_field(cmd,bolUpdateState) {
        var field = $(cmd).attr("data-field");


        var rel_plus_entity = $(cmd).attr("data-entity");

        var rel_alias = $("#group__" + rel_plus_entity).text();

        var alias = $("span[data-field=" + field + "]").first().text() + " [" + rel_alias + "]";

        if (_sels.includes(field)) {
            _notify_message("Sloupec [" + field + "] již je ve výběru.", "info");
            return;
        }

        $(cmd).prop("disabled", true);
        $("span[data-field=" + field + "]").addClass("field_selected");


        $("#list1").append("<option selected value='" + field + "'>" + alias + "</option>");
        $("#list1").val(field);

        if (bolUpdateState == true) {
            refresh_state();
        }

    }

    $("#cmdUp").click(function () {
        $("#list1 option:selected").each(function () {
            var newPos = $('#list1 option').index(this) - 1;
            if (newPos > -1) {
                $("#list1 option").eq(newPos).before("<option value='" + $(this).val() + "' selected='selected'>" + $(this).text() + "</option>");
                $(this).remove();
            }
        });
        refresh_state();
    });
    $("#cmdDown").click(function () {
        var countOptions = $('#list1 option').length;
        $('#list1 option:selected').each(function () {
            var newPos = $('#list1 option').index(this) + 1;
            if (newPos < countOptions) {
                $('#list1 option').eq(newPos).after("<option value='" + $(this).val() + "' selected='selected'>" + $(this).text() + "</option>");
                $(this).remove();
            }
        });
        refresh_state();
    });

    $("#list1").dblclick(function () {
        $("#cmdRemove").click();
    });
    $("#cmdRemove").click(function () {
        $("#list1 option:selected").each(function () {
            var field = $(this).val();
            $("span[data-field=" + field + "]").removeClass("field_selected");

            $("button[data-field=" + field + "]").prop("disabled", false);


            $(this).remove();

        });
        if ($("#list1").length > 0) {
            $("#list1").prop("selectedIndex", "0");
        }
        refresh_state();
    });


    function refresh_state() {
        _sels = [];
        $("#list1 option").each(function () {
            _sels.push(this.value);
        });
        $("#Rec_j72Columns").val(_sels.join(","));

        if (document.getElementById("list1").length > 0) {
            $("#cmdRemove").prop("disabled", false);
            $("#cmdUp").prop("disabled", false);
            $("#cmdDown").prop("disabled", false);
        } else {
            $("#cmdRemove").prop("disabled", true);
            $("#cmdUp").prop("disabled", true);
            $("#cmdDown").prop("disabled", true);
        }



    }

    function recovery_state() {
        var fields = $("#Rec_j72Columns").val();
        if (fields == "") return;
        var arr = fields.split(",");
        for (i = 0; i < arr.length; i++) {
            var field = arr[i];

            var cmd = $("button[data-field=" + field + "]").first();
            handle_append_field(cmd,false);
        }
        if ($("#list1").length > 0) {
            $("#list1").prop("selectedIndex", "0");
        }

    }
    function tree_init() {
        var toggler = document.getElementsByClassName("caret");
        var i;

        for (i = 0; i < toggler.length; i++) {
            toggler[i].addEventListener("click", function () {
                this.parentElement.querySelector(".collapsed").classList.toggle("expanded");

                this.classList.toggle("caret-down");
            });
        }
    }

    function savechanges() {
        var fields = $("#Rec_j72Columns").val();
        if (fields == "") {
            _notify_message("Grid musí obsahovat minimálně jeden sloupec.");
            return;
        }
        form1.submit();
    }

    function restore2factory() {
        $.showConfirm({
            title: "Rozhodněte se...", body: "Tovární stav = Výchozí sada sloupců, vyčištění sloupců, filtru a souhrnů.<hr>Mám pokračovat?", textTrue: "ANO", textFalse: "NE",
            onSubmit: function (result) {
                if (result) {
                    var url = "@Url.Action("Designer","TheGrid", new { restore2factory = true})";
                    form1.action = url;
                    form1.submit();


                } else {
                    //nechce
                }
            },
            onDispose: function () {
                //nic
            }
        })
    }

</script>



