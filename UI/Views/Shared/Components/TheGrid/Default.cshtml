@model UI.Models.TheGridViewModel
@{

    var _cols = Model.Columns;
}
<div id="container_grid">
    <table id="tabgrid0" class="tabgrid_auto">
        <thead id="tabgrid1_thead">
            <tr id="tr_header_headline">
                <th class="th0" style="width:20px;">
                    @if (Model.GridState.j72SelectableFlag > 0)
                    {
                        <input type="checkbox" id="tg_chkAll" onchange="tg_select_all(this)" style="cursor: pointer;" />
                    }

                </th>
                <th class="th0" style="width:20px;">

                </th>
                <th class="th0" style="width:20px;">

                </th>
                @{
                    string strClass = "";
                    string strStyle = "";

                }
                @foreach (var c in Model.Columns)
                {
                    strStyle = "width:" + c.ColumnWidthPixels;
                    if (Model.GridState.j72SortDataField == c.UniqueName)
                    {
                        strStyle += ";background-color:silver;";
                        if (Model.GridState.j72SortOrder == "desc")
                        {
                            c.Header += "&#8595";
                        }
                        else
                        {
                            c.Header += "&#8593;";
                        }


                    }
                    if (c.IsSortable)
                    {
                        strClass = "class='sortcolumn'";
                    }
                    else
                    {
                        strClass = "nonsortable";
                    }


                    <th class="@strClass" id="th_@c.Field" title="@c.Header" columntypename="@c.FieldType" style="@strStyle">@c.Header</th>
                }

            </tr>
            <tr id="tr_header_query">
                <th></th>
                <th></th>
                <th></th>
                @foreach (var c in Model.Columns)
                {

                    strStyle = "";
                    var strValue = "";
                    <th>
                        @if (c.FieldType == "string")
                        {
                            <text>
                                <div class="input-group">
                                    <input type="text" id="txtqry_@c.UniqueName" class="form-control form-control-sm query_textbox" value="@strValue" style="@strStyle" />

                                    <button type='button' id="cmdqry_@c.UniqueName" tabindex="-1" class="btn btn-light btn-sm py-0 px-1 query_button"><i class="fas fa-filter" style="color:#838383;"></i></button>

                                </div>
                            </text>
                        }
                        else
                        {
                            <span class="qryalias" id="qryalias_@c.UniqueName" @strStyle>@strValue</span>
                            <button type='button' id="cmdqry_@c.UniqueName" tabindex="-1" class="btn btn-light btn-sm py-0 px-1 query_button"><i class="fas fa-filter" style="color:#838383;"></i></button>
                        }

                    </th>
                }
            </tr>

        </thead>
    </table>
    <div id="container_vScroll" style="height:700px;">
        <table id="tabgrid1" class="tabgrid_auto">
            <tbody id="tabrid1_tbody"></tbody>


        </table>
    </div>
    <table id="tabgrid2" class="tabgrid_auto">
        <thead id="tabgrid1_tfoot">
        </thead>
    </table>
</div>
<button type="button" onclick="pokus()">pokus</button>

<script type="text/javascript">
    $(document).ready(function () {


        var _entity = "@Model.Entity";
        var _url = "@Url.Action("GetHtml4TheGrid", "TheGrid")";
        var _j72id = "@Model.GridState.j72ID";
        

        $.get(_url, { entity: _entity,j72id:_j72id }, function (data) {

            $("#tabrid1_tbody").html(data.body);
            $("#tabgrid1_tfoot").html(data.foot);


            $("#container_vScroll").width($("#container_grid").width() + $("#container_grid").scrollLeft());

            var basewidth = $("#tabgrid0").width();
            $("#tabgrid1").width(basewidth);
            $("#tabgrid2").width(basewidth);


            
            //$("#tabrid1_tbody").selectable();
            setup_selectable();
            

        });

       
        //$("#tabrid1_tbody").on("selectablestop", function (event, ui) {
            
        //    _notify_message("stop");
        //});
        

        $("#container_grid").scroll(function () {
            $("#container_vScroll").width($("#container_grid").width() + $("#container_grid").scrollLeft());
        });


        

    });

    function pokus() {
        var s = "";
        $("#tabrid1_tbody tr .ui-selected").each(function () {
            s = s + "," + this.id;
        });
        _notify_message(s);
    }







    function setup_selectable() {
        

        var ds = new DragSelect({
            selectables: document.getElementsByClassName('selectable'), // node/nodes that can be selected. This is also optional, you could just add them later with .addSelectables.
            selectedClass: "row_selected",
            area: document.getElementById('tabrid1'), // area in which you can drag. If not provided it will be the whole document.
            customStyles: false,  // If set to true, no styles (except for position absolute) will be applied by default.
            multiSelectKeys: ['ctrlKey', 'shiftKey', 'metaKey'],  // special keys that allow multiselection.
            multiSelectMode: false,  // If set to true, the multiselection behavior will be turned on by default without the need of modifier keys. Default: false
            autoScrollSpeed: 3,  // Speed in which the area scrolls while selecting (if available). Unit is pixel per movement. Set to 0 to disable autoscrolling. Default = 1
            onDragStart: function (element) { }, // fired when the user clicks in the area. This callback gets the event object. Executed after DragSelect function code ran, befor the setup of event listeners.
            onDragMove: function (element) { }, // fired when the user drags. This callback gets the event object. Executed before DragSelect function code ran, after getting the current mouse position.
            onElementSelect: function (element) { }, // fired every time an element is selected. (element) = just selected node
            onElementUnselect: function (element) { }, // fired every time an element is de-selected. (element) = just de-selected node.
            callback: function (elements) {
                _notify_message(elements.length);
            } // fired once the user releases the mouse. (elements) = selected nodes.
        });
    }


    
</script>