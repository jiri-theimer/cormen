@model p31TimelineViewModel

@addTagHelper *, UI

@{
    ViewData["Title"] = "Kapacitní fondy";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int _Month = Model.CurrentDate.Month;
    int _Year = Model.CurrentDate.Year;

    string format_hour(int i)
    {
        if (i < 10)
        {
            return "0" + i.ToString();
        }
        else
        {
            return i.ToString();
        }
    }
    string format_date(int day)
    {
        DateTime d = new DateTime(_Year, _Month, day);
        return Convert.ToDateTime(d).ToString("dd¨ddd");


    }
}

<style type="text/css">
    .selcell1 {
        background-color: #448CCB;
        color: white;
    }
    .selcell2 {
        background-color: #DC3545 !important;
    }

    #container1 td {
        -webkit-user-select: none; /* Safari */
        -ms-user-select: none; /* IE 10+ and Edge */
        user-select: none; /* Standard syntax */
    }

    .nowork {
        background-color: #FFF0F7;
    }

    .obsazeno {
        background-color:lightsteelblue;
    }
    
</style>

<div class="input-group">
    <div style="padding-top:4px;">
        <h4>Kapacitní fondy</h4>
    </div>

    <div style="width:30px;">
        <button type="button" class="btn btn-light" title="Předchozí měsíc" onclick="month_prev()">&lt;&lt;</button>
    </div>
    <div style="width: 120px;">

        <mydate asp-for="@Model.CurrentDate"></mydate>

    </div>
    <div style="width:30px;">
        <button type="button" class="btn btn-light" title="Následující měsíc" onclick="month_next()">&gt;&gt;</button>
    </div>
    <div style="min-width:200px;margin-left:20px;">
        <mycombo entity="p31CapacityFond" asp-for="@Model.RecP31.pid" selectedtext="@Model.RecP31.p31Name" event_after_changevalue="p31id_change" view-flag="2"></mycombo>
    </div>
    <div style="margin-left: 20px;
">
        <button type="button" class="btn btn-primary" onclick="save_cells()">Uložit kapacitu do označených buněk</button>
    </div>
    <div style="margin-left: 20px;
">
        <button type="button" class="btn btn-danger" onclick="clear_cells()">Vyčistit kapacitu v označených buňkách</button>
    </div>
</div>
<div id="container1">
    <table class="table table-sm table-hover table-bordered">
        <thead>
            <tr>
                <th>
                    Den
                </th>
                @for (var i = Model.RecP31.p31DayHour1; i <= Model.RecP31.p31DayHour2; i++)
                {
                    <th>
                        @(format_hour(i)):00
                    </th>
                    <th>
                        <small>@(format_hour(i)):30</small>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @{
                string strTrClass = "work";
                
            }
            @for (var dayindex = 1; dayindex <= DateTime.DaysInMonth(_Year, _Month); dayindex++)
            {
                {
                    DateTime dat = new DateTime(_Year, _Month, dayindex);
                    if (dat.DayOfWeek == DayOfWeek.Saturday || dat.DayOfWeek == DayOfWeek.Sunday)
                    {
                        strTrClass = "nowork";
                    }
                    else
                    {
                        strTrClass = "work";
                    }
                }
                <tr class="@strTrClass">
                    <td>
                        @(format_date(dayindex))
                    </td>

                    @for (var i = Model.RecP31.p31DayHour1; i <= Model.RecP31.p31DayHour2; i++)
                    {
                        if (Model.lisP33.Where(p => p.p33Day == dayindex && p.p33Hour == i && p.p33Minute == 0).Count() > 0)
                        {
                            <td class="obsazeno" data-day="@(dayindex)" data-hour="@(i)" data-minute="0"></td>
                        }
                        else
                        {
                            <td class="can-select" data-day="@(dayindex)" data-hour="@(i)" data-minute="0"></td>
                        }

                        if (Model.lisP33.Where(p => p.p33Day == dayindex && p.p33Hour == i && p.p33Minute == 30).Count() > 0)
                        {
                            <td class="obsazeno" data-day="@(dayindex)" data-hour="@(i)" data-minute="30"></td>
                        }
                        else
                        {
                            <td class="can-select" data-day="@(dayindex)" data-hour="@(i)" data-minute="30"></td>
                        }




                    }
                </tr>
            }

        </tbody>

    </table>
</div>


<script type="text/javascript">
    var _ds1;
    var _ds2;
    var _cells1;
    var _cells2;


    $(document).ready(function () {


        tg_setup_selectable1();
        tg_setup_selectable2();


        $("#CurrentDatehelper").change(function () {
            var d = $(this).val();
            location.replace("/p31/p31Timeline?p31id=@Model.RecP31.pid&d=" + d);
        });

        _mainmenu_select("p26", "p31timeline");
    });



    function tg_setup_selectable1() {

        _ds1 = new DragSelect({
            selectables: document.getElementsByClassName('can-select'), // node/nodes that can be selected. This is also optional, you could just add them later with .addSelectables.
            selectedClass: "selcell1",
            area: document.getElementById("container1"), // area in which you can drag. If not provided it will be the whole document.
            customStyles: false,  // If set to true, no styles (except for position absolute) will be applied by default.
            multiSelectKeys: ['ctrlKey', 'shiftKey', 'metaKey'],  // special keys that allow multiselection.
            multiSelectMode: false,  // If set to true, the multiselection behavior will be turned on by default without the need of modifier keys. Default: false
            autoScrollSpeed: 20,  // Speed in which the area scrolls while selecting (if available). Unit is pixel per movement. Set to 0 to disable autoscrolling. Default = 1
            onDragStart: function (element) { }, // fired when the user clicks in the area. This callback gets the event object. Executed after DragSelect function code ran, befor the setup of event listeners.
            onDragMove: function (element) { }, // fired when the user drags. This callback gets the event object. Executed before DragSelect function code ran, after getting the current mouse position.
            onElementSelect: function (element) { }, // fired every time an element is selected. (element) = just selected node
            onElementUnselect: function (element) { }, // fired every time an element is de-selected. (element) = just de-selected node.
            callback: function (elements) {
                // fired once the user releases the mouse. (elements) = selected nodes.

                if (elements.length > 0) {
                    _cells1 = [];
                    
                    for (i = 0; i < elements.length; i++) {

                        var cell = {
                            dayindex: $(elements[i]).attr("data-day"),
                            hour: $(elements[i]).attr("data-hour"),
                            minute: $(elements[i]).attr("data-minute")
                        }

                        _cells1.push(cell);

                    }




                }

            }



        });
    }

    function tg_setup_selectable2() {

        _ds2 = new DragSelect({
            selectables: document.getElementsByClassName('obsazeno'), // node/nodes that can be selected. This is also optional, you could just add them later with .addSelectables.
            selectedClass: "selcell2",
            area: document.getElementById("container1"), // area in which you can drag. If not provided it will be the whole document.
            customStyles: false,  // If set to true, no styles (except for position absolute) will be applied by default.
            multiSelectKeys: ['ctrlKey', 'shiftKey', 'metaKey'],  // special keys that allow multiselection.
            multiSelectMode: false,  // If set to true, the multiselection behavior will be turned on by default without the need of modifier keys. Default: false
            autoScrollSpeed: 20,  // Speed in which the area scrolls while selecting (if available). Unit is pixel per movement. Set to 0 to disable autoscrolling. Default = 1
            onDragStart: function (element) { }, // fired when the user clicks in the area. This callback gets the event object. Executed after DragSelect function code ran, befor the setup of event listeners.
            onDragMove: function (element) { }, // fired when the user drags. This callback gets the event object. Executed before DragSelect function code ran, after getting the current mouse position.
            onElementSelect: function (element) { }, // fired every time an element is selected. (element) = just selected node
            onElementUnselect: function (element) { }, // fired every time an element is de-selected. (element) = just de-selected node.
            callback: function (elements) {
                // fired once the user releases the mouse. (elements) = selected nodes.

                if (elements.length > 0) {
                    _cells2 = [];
                   
                    for (i = 0; i < elements.length; i++) {

                        var cell = {
                            dayindex: $(elements[i]).attr("data-day"),
                            hour: $(elements[i]).attr("data-hour"),
                            minute: $(elements[i]).attr("data-minute")
                        }

                        _cells2.push(cell);

                    }




                }

            }



        });
    }

    function month_next() {
        var s = "@(BO.BAS.ObjectDate2String( Model.CurrentDate.AddMonths(1)))";
        location.replace("/p31/p31Timeline?p31id=@Model.RecP31.pid&d=" + s);


    }
    function month_prev() {
        var s = "@(BO.BAS.ObjectDate2String( Model.CurrentDate.AddMonths(-1)))";
        location.replace("/p31/p31Timeline?p31id=@Model.RecP31.pid&d=" + s);

    }
    function p31id_change(p31id) {
        var s = "@(BO.BAS.ObjectDate2String( Model.CurrentDate))";
        location.replace("/p31/p31Timeline?p31id=" + p31id+"&d="+s);
    }



    function save_cells() {
        if (_cells1 == null) {
            _notify_message("Musíte označit (modře) minimálně jednu buňku bez kapacitního fondu.");
            return;
        }
        var url = "@Url.Action("SaveCells", "p31")";
        var d = "@(BO.BAS.ObjectDate2String( Model.CurrentDate))";

        $.post(url, { p31id:@Model.RecP31.pid, d: d, cells: _cells1 }, function (data) {
                //_notify_message(data.message,"info");
            p31id_change(@(Model.RecP31.pid));

        });
    }
    function clear_cells() {
        if (_cells2 == null) {
            _notify_message("Musíte označit (červeně) minimálně jednu buňku s kapacitním fondem.");
            return;
        }
        
        var url = "@Url.Action("ClearCells", "p31")";
        var d = "@(BO.BAS.ObjectDate2String( Model.CurrentDate))";

        $.post(url, { p31id:@Model.RecP31.pid, d: d, cells: _cells2 }, function (data) {
                //_notify_message(data.message,"info");
            p31id_change(@(Model.RecP31.pid));

        });
    }
</script>
